{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/LineChart.jsx","components/Chart/BarChart.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","varian","URL","fetchData","country","a","dataURL","axios","get","LineChart","chartData","labels","map","day","reportDate","datasets","total","label","borderColor","fill","backgroundColor","BarChart","options","legend","display","title","text","Chart","useState","setChartData","useEffect","then","res","CountryPicker","onCountryChange","countries","setCountries","error","FormControl","formControl","NativeSelect","selected","onChange","e","target","handleCountryChange","key","iso3","name","App","setData","setCountry","fetchAPI","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,qMC8FpJC,EAzFD,SAAC,GAA4D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,WACrD,OAAKH,EAIH,yBAAKI,UAAWC,IAAOC,WACrB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UAClC,kBAACF,EAAA,EAAD,CACEG,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,WAElC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKxB,EAAUyB,MACfC,SAAU,IACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAC3C,IAAIO,KAAKzB,GAAY0B,gBAExB,kBAACV,EAAA,EAAD,CAAYW,OAAO,SAAnB,4BAIJ,kBAACvB,EAAA,EAAD,CACEG,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOJ,YAElC,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKvB,EAAUwB,MACfC,SAAU,IACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAC3C,IAAIO,KAAKzB,GAAY0B,gBAExB,kBAACV,EAAA,EAAD,CAAYW,OAAO,SAAnB,0BAIJ,kBAACvB,EAAA,EAAD,CACEG,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOH,SAElC,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKtB,EAAOuB,MACZC,SAAU,IACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAC3C,IAAIO,KAAKzB,GAAY0B,gBAExB,kBAACV,EAAA,EAAD,CAAYW,OAAO,SAAnB,6BA/ED,W,iBCNLC,EAAM,iCAENC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACZC,EAAUJ,EACVE,IACFE,GAAO,qBAAkBF,IAHX,kBASJG,IAAMC,IAAIF,GATN,2BAQZpC,KAAQC,EARI,EAQJA,UAAWC,EARP,EAQOA,UAAWC,EARlB,EAQkBA,OAAQC,EAR1B,EAQ0BA,WAR1B,kBAUP,CAAEH,YAAWC,YAAWC,SAAQC,eAVzB,2HAAH,sD,QCwBAmC,EAzBG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACnB,OACE,kBAAC,OAAD,CACExC,KAAM,CACJyC,OAAQD,EAAUE,KAAI,SAACC,GAAD,OAASA,EAAIC,cACnCC,SAAU,CACR,CACE7C,KAAMwC,EAAUE,KAAI,SAACC,GAAD,OAASA,EAAI1C,UAAU6C,SAC3CC,MAAO,WACPC,YAAa,UACbC,MAAM,GAER,CACEjD,KAAMwC,EAAUE,KAAI,SAACC,GAAD,OAASA,EAAIxC,OAAO2C,SACxCC,MAAO,SACPC,YAAa,MACbE,gBAAiB,sBACjBD,MAAM,QCYHE,EA7BE,SAAC,GAAmB,IAAjBX,EAAgB,EAAhBA,UAClB,OACE,kBAAC,MAAD,CACExC,KAAM,CACJyC,OAAQ,CAAC,WAAY,YAAa,UAClCI,SAAU,CACR,CACEE,MAAO,SACPG,gBAAiB,CACf,uBACA,uBACA,wBAEFlD,KAAM,CACJwC,EAAUvC,UAAUyB,MACpBc,EAAUtC,UAAUwB,MACpBc,EAAUrC,OAAOuB,UAKzB0B,QAAS,CACPC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,yB,iBCDtBC,EAlBD,SAAC,GAAyD,IAAD,IAAtDzD,KAAQC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,OAAU+B,EAAc,EAAdA,QAAc,EACnCwB,mBAAS,IAD0B,mBAC9DlB,EAD8D,KACnDmB,EADmD,KAOrE,OAJAC,qBAAU,WACRvB,IAAMC,IAAIN,EAAM,UAAU6B,MAAK,SAACC,GAAD,OAASH,EAAaG,EAAI9D,WACxD,IAGD,yBAAKK,UAAWC,IAAOC,WACR,KAAZ2B,GAAkBjC,EACjB,kBAAC,EAAD,CAAUuC,UAAW,CAAEvC,YAAWC,YAAWC,YAE7C,kBAAC,EAAD,CAAWqC,UAAWA,M,mCCkBfuB,EA/BO,SAAC,GAAkC,IAAhC7B,EAA+B,EAA/BA,QAAS8B,EAAsB,EAAtBA,gBAAsB,EACpBN,mBAAS,IADW,mBAC/CO,EAD+C,KACpCC,EADoC,KAGtDN,qBAAU,WACR,IACEvB,IAAMC,IAAN,UAAaN,EAAb,eAA8B6B,MAAK,SAACC,GAClCI,EAAaJ,EAAI9D,KAAKiE,cAExB,MAAOE,OACR,IAMH,OACE,kBAACC,EAAA,EAAD,CAAa/D,UAAWC,IAAO+D,aAC7B,kBAACC,EAAA,EAAD,CAAcC,SAAUrC,EAASsC,SAAU,SAACC,GAAD,OANnB,SAACA,GAC3BT,EAAgBS,EAAEC,OAAOhD,OAK2BiD,CAAoBF,KACpE,4BAAQ/C,MAAM,IAAd,UACCuC,EAAUvB,KAAI,SAACR,GACd,OACE,4BAAQ0C,IAAK1C,EAAQ2C,KAAO3C,EAAQ4C,KAAMpD,MAAOQ,EAAQ2C,MACtD3C,EAAQ4C,Y,iBCMRC,EA7BH,WAAO,IAAD,EACQrB,mBAAS,IADjB,mBACT1D,EADS,KACHgF,EADG,OAEctB,mBAAS,UAFvB,mBAETxB,EAFS,KAEA+C,EAFA,KAKhBrB,qBAAU,YACM,uCAAG,4BAAAzB,EAAA,sEACIF,IADJ,OACTjC,EADS,OAEfgF,EAAQhF,GAFO,2CAAH,qDAIdkF,KACC,IAGH,IAAMlB,EAAe,uCAAG,WAAO9B,GAAP,eAAAC,EAAA,sEACHF,EAAUC,GADP,OAChBlC,EADgB,OAEtBgF,EAAQhF,GACRiF,EAAW/C,GAHW,2CAAH,sDAMrB,OACE,yBAAK7B,UAAWC,IAAOC,WACrB,kBAAC,EAAD,CAAOP,KAAMA,IACb,kBAAC,EAAD,CAAekC,QAASA,EAAS8B,gBAAiBA,IAClD,kBAAC,EAAD,CAAOhE,KAAMA,EAAMkC,QAASA,MCzBlCiD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U,mBCP1B1F,EAAOC,QAAU,CAAC,UAAY,2B,wCCA9BD,EAAOC,QAAU,CAAC,UAAY,yB","file":"static/js/main.9230f2bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3DZe2\",\"card\":\"Cards_card__11LSN\",\"infected\":\"Cards_infected__17MpR\",\"recovered\":\"Cards_recovered__3sedv\",\"deaths\":\"Cards_deaths__25y9P\"};","import React from \"react\";\r\nimport styles from \"./Cards.module.css\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"Loading\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={1.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography varian=\"body2\">Number of active cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={1.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography varian=\"body2\">Number of recoveries</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={1.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography varian=\"body2\">Number of death cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst URL = \"https://covid19.mathdro.id/api\";\r\n\r\nconst fetchData = async (country) => {\r\n  let dataURL = URL;\r\n  if (country) {\r\n    dataURL += `/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(dataURL);\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport { URL, fetchData };\r\n","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst LineChart = ({ chartData }) => {\r\n  return (\r\n    <Line\r\n      data={{\r\n        labels: chartData.map((day) => day.reportDate),\r\n        datasets: [\r\n          {\r\n            data: chartData.map((day) => day.confirmed.total),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: chartData.map((day) => day.deaths.total),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, .5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    ></Line>\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n","import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nconst BarChart = ({ chartData }) => {\r\n  return (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [\r\n              chartData.confirmed.value,\r\n              chartData.recovered.value,\r\n              chartData.deaths.value,\r\n            ],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ` },\r\n      }}\r\n    ></Bar>\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { URL } from \"../../api/\";\r\nimport axios from \"axios\";\r\nimport LineChart from \"./LineChart\";\r\nimport BarChart from \"./BarChart\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(URL + \"/daily\").then((res) => setChartData(res.data));\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country !== \"\" && confirmed ? (\r\n        <BarChart chartData={{ confirmed, recovered, deaths }} />\r\n      ) : (\r\n        <LineChart chartData={chartData} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport axios from \"axios\";\r\nimport { URL } from \"../../api\";\r\n\r\nconst CountryPicker = ({ country, onCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      axios.get(`${URL}/countries`).then((res) => {\r\n        setCountries(res.data.countries);\r\n      });\r\n    } catch (error) {}\r\n  }, []);\r\n\r\n  const handleCountryChange = (e) => {\r\n    onCountryChange(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect selected={country} onChange={(e) => handleCountryChange(e)}>\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country) => {\r\n          return (\r\n            <option key={country.iso3 + country.name} value={country.iso3}>\r\n              {country.name}\r\n            </option>\r\n          );\r\n        })}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState({});\r\n  const [country, setCountry] = useState(\"global\");\r\n\r\n  // Side effect to load info for cards!!!\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const data = await fetchData();\r\n      setData(data);\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  //   Country change handler loads particular country info & sets country as active\r\n  const onCountryChange = async (country) => {\r\n    const data = await fetchData(country);\r\n    setData(data);\r\n    setCountry(country);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Cards data={data} />\r\n      <CountryPicker country={country} onCountryChange={onCountryChange} />\r\n      <Chart data={data} country={country} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1iRnN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__K5X8p\"};"],"sourceRoot":""}